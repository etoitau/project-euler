# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
# The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
# However, their difference, 70 − 22 = 48, is not pentagonal.
# Find the pair of pentagonal numbers, Pj and Pk, for which 
# their sum and difference are pentagonal and D = |Pk − Pj| 
# is minimised; what is the value of D?
# Result: 5482660

from itertools import permutations
import math
from typing import Set, List, Tuple, Dict
from functools import reduce
import time
import sys
sys.path.append(".")
from util import is_pentagonal_number, pentagonal_number
import os

__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))
    
if __name__ == '__main__':
    """starts here"""
    start = time.time()
    # say the four pentagonal numbers are ap, bp, cp, dp
    # where ap = cp - bp
    # and   dp = bp + cp
    # then  cp = (ap + dp) / 2
    # and   bp = (dp - ap) / 2
    # for each dp, increment ap up from the minimum 
    # and confirm bp and cp are pentagonal
    # first one we find is smallest for that dp
    # and the solution with the smallest dp
    # I'm not sure that guarentees there won't be a smaller
    # different for some larger dp, though...
    pentagonals = [ pentagonal_number(n) for n in range(4) ]
    a = 1
    d = 3
    not_found = True
    while not_found:
        d += 1
        dp = pentagonal_number(d)
        pentagonals.append(dp)
        for a in range(1, d):
            ap = pentagonals[a]
            dp = pentagonals[d]
            if is_pentagonal_number((dp - ap) / 2) and is_pentagonal_number((ap + dp) / 2):
                print(ap) # 5482660
                not_found = False
                break
    print(time.time() - start) # 3.384 sec
